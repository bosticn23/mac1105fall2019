## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file composition.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_214 = Integer(214); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_18 = Integer(18); _sage_const_210 = Integer(210); _sage_const_195 = Integer(195); _sage_const_156 = Integer(156); _sage_const_173 = Integer(173); _sage_const_175 = Integer(175); _sage_const_152 = Integer(152); _sage_const_176 = Integer(176); _sage_const_178 = Integer(178); _sage_const_209 = Integer(209); _sage_const_159 = Integer(159); _sage_const_158 = Integer(158); _sage_const_193 = Integer(193); _sage_const_192 = Integer(192); _sage_const_212 = Integer(212); _sage_const_190 = Integer(190); _sage_const_197 = Integer(197); _sage_const_180 = Integer(180); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_19 = Integer(19); _sage_const_32 = Integer(32); _sage_const_207 = Integer(207); _sage_const_163 = Integer(163); _sage_const_161 = Integer(161)## This file (composition.sagetex.sage) was *autogenerated* from composition.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('composition', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_32 
_st_.blockbegin()
try:
 x = var("x")
 
 def maybeMakeNegative(natural):
     integer = natural*(-_sage_const_1 )**ZZ.random_element(_sage_const_2 )
     return integer
 
 def evaluateNegativeCubeRoot(value, a, b):
     if value - b < _sage_const_0 :
         return -((-value+b)**(_sage_const_1 /_sage_const_3 )) + a
     else:
         return (value-b)**(_sage_const_1 /_sage_const_3 ) + a
 
 def generatePolynomial(degree):
     coefficients = [maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 )), maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 )), maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 )), maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 )), maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))]
     if degree == _sage_const_1 :
         coefficients[_sage_const_4 ] = _sage_const_0 
         coefficients[_sage_const_3 ] = _sage_const_0 
         coefficients[_sage_const_2 ] = _sage_const_0 
     elif degree == _sage_const_2 :
         coefficients[_sage_const_4 ] = _sage_const_0 
         coefficients[_sage_const_3 ] = _sage_const_0 
     else:
         coefficients[_sage_const_4 ] = _sage_const_0 
     polynomial = coefficients[_sage_const_4 ] * x**_sage_const_4  + coefficients[_sage_const_3 ] * x**_sage_const_3  + coefficients[_sage_const_2 ] * x**_sage_const_2  + coefficients[_sage_const_1 ] * x + coefficients[_sage_const_0 ]
     return polynomial
 
 def generateRadical():
     factor = generatePolynomial(_sage_const_1 )
     pivotPoint = round(float(solve(factor == _sage_const_0 , x)[_sage_const_0 ].rhs() ), _sage_const_3 )
     checkNearby = pivotPoint - _sage_const_1 
     if factor(x=checkNearby) < _sage_const_0 :
         domain = [pivotPoint, Infinity]
     else:
         domain = [-Infinity, pivotPoint]
     radical = sqrt(factor)
     return [radical, domain]
 
 def generateRational():
     factor = generatePolynomial(_sage_const_1 )
     excludeFromDomain = round(float(solve(factor == _sage_const_0 , x)[_sage_const_0 ].rhs() ), _sage_const_3 )
     rational = _sage_const_1 /factor
     return [rational, excludeFromDomain]
 
 def generateInversePair():
     a = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     b = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     while a == b or a == -b:
         a = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
         b = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     poly = (x - a)**_sage_const_3  + b
     radical = (x-b)**(_sage_const_1 /_sage_const_3 ) + a
     return [poly, radical, a, b]
 #####
 degreeQ1f = ZZ.random_element(_sage_const_1 , _sage_const_3 )
 degreeQ1g = ZZ.random_element(_sage_const_1 , _sage_const_3 )
 functionQ1f = generatePolynomial(degreeQ1f)
 functionQ1g = generatePolynomial(degreeQ1g)
 valueQ1 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_5 ))
 #
 print "Question 1:\n %s \n %s \n %s \n \n " %(functionQ1f, functionQ1g, valueQ1)
 evaluateFGQ1 = round(float(functionQ1f(x = functionQ1g(x = valueQ1))), _sage_const_3 )
 evaluateGFQ1 = round(float(functionQ1g(x = functionQ1f(x = valueQ1))), _sage_const_3 )
 print "Solutions: \n %s \n %s \n \n" %(evaluateFGQ1, evaluateGFQ1)
 ###
 ###
 degreeQ2f = ZZ.random_element(_sage_const_2 , _sage_const_5 )
 functionQ2f = generatePolynomial(degreeQ2f)
 tempQ2 = generateRational()
 functionQ2g = tempQ2[_sage_const_0 ]
 valueQ2 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_5 ))
 while valueQ2 == tempQ2:
     valueQ2 = maybeMakeNegative(ZZ.random_element(_sage_const_2 , _sage_const_7 ))
 #
 print "Question 2:\n %s \n %s \n %s \n \n " %(functionQ2f, functionQ2g, valueQ2)
 evaluateFGQ2 = round(float(functionQ2f(x = functionQ2g(x = valueQ2))), _sage_const_3 )
 evaluateGFQ2 = round(float(functionQ2g(x = functionQ2f(x = valueQ2))), _sage_const_3 )
 print "Solutions: \n %s \n %s \n \n" %(evaluateFGQ2, evaluateGFQ2)
 ###
 ###
 degreeQ3f = ZZ.random_element(_sage_const_2 , _sage_const_5 )
 functionQ3f = generatePolynomial(degreeQ3f)
 tempQ3 = generateRadical()
 functionQ3g = tempQ3[_sage_const_0 ]
 if tempQ3[_sage_const_1 ][_sage_const_0 ] > -Infinity:
     bound3 = tempQ3[_sage_const_1 ][_sage_const_0 ]
     valueQ3 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_5 ))
     print "%s should be smaller than %s" %(bound3, valueQ3)
     while valueQ3 < bound3 or functionQ3f(valueQ3) < bound3:
         degreeQ3f = ZZ.random_element(_sage_const_2 , _sage_const_5 )
         functionQ3f = generatePolynomial(degreeQ3f)
         valueQ3 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_5 ))
         print "%s should be smaller than %s" %(bound3, valueQ3)
 else:
     bound3 = tempQ3[_sage_const_1 ][_sage_const_1 ]
     valueQ3 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_5 ))
     print "%s should be greater than %s" %(bound3, valueQ3)
     while valueQ3 > bound3 or functionQ3f(valueQ3) > bound3:
         degreeQ3f = ZZ.random_element(_sage_const_2 , _sage_const_5 )
         functionQ3f = generatePolynomial(degreeQ3f)
         valueQ3 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_5 ))
         print "%s should be greater than %s" %(bound3, valueQ3)
 #
 print "Question 3:\n %s \n %s \n %s \n \n " %(functionQ3f, functionQ3g, valueQ3)
 evaluateFGQ3 = round(float(functionQ3f(x = functionQ3g(x = valueQ3))), _sage_const_3 )
 evaluateGFQ3 = round(float(functionQ3g(x = functionQ3f(x = valueQ3))), _sage_const_3 )
 print "Solutions: \n %s \n %s \n \n" %(evaluateFGQ3, evaluateGFQ3)
 ###
 ###
 functionQ4f, functionQ4g, aQ4, bQ4 = generateInversePair()
 valueQ4 = maybeMakeNegative(ZZ.random_element(_sage_const_2 , _sage_const_7 ))
 #
 print "Question 4: \n %s \n %s \n %s \n \n " %(functionQ4f, functionQ4g, valueQ4)
 evaluateFGQ4 = round(float(functionQ4f(x = evaluateNegativeCubeRoot(valueQ4, aQ4, bQ4) )), _sage_const_3 )
 evaluateGFQ4 = round(float( evaluateNegativeCubeRoot(functionQ4f(x = valueQ4), aQ4, bQ4) ), _sage_const_3 )
 print "Solutions: \n %s \n %s \n \n" %(evaluateFGQ4, evaluateGFQ4)
 ###
 
 
 
except:
 _st_.goboom(_sage_const_152 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_156 
 _st_.inline(_sage_const_0 , latex(valueQ1))
except:
 _st_.goboom(_sage_const_156 )
try:
 _st_.current_tex_line = _sage_const_156 
 _st_.inline(_sage_const_1 , latex(valueQ1))
except:
 _st_.goboom(_sage_const_156 )
try:
 _st_.current_tex_line = _sage_const_158 
 _st_.inline(_sage_const_2 , latex(functionQ1f))
except:
 _st_.goboom(_sage_const_158 )
try:
 _st_.current_tex_line = _sage_const_159 
 _st_.inline(_sage_const_3 , latex(functionQ1g))
except:
 _st_.goboom(_sage_const_159 )
try:
 _st_.current_tex_line = _sage_const_161 
 _st_.inline(_sage_const_4 , latex(valueQ1))
except:
 _st_.goboom(_sage_const_161 )
try:
 _st_.current_tex_line = _sage_const_161 
 _st_.inline(_sage_const_5 , latex(evaluateFGQ1))
except:
 _st_.goboom(_sage_const_161 )
try:
 _st_.current_tex_line = _sage_const_163 
 _st_.inline(_sage_const_6 , latex(valueQ1))
except:
 _st_.goboom(_sage_const_163 )
try:
 _st_.current_tex_line = _sage_const_163 
 _st_.inline(_sage_const_7 , latex(evaluateGFQ1))
except:
 _st_.goboom(_sage_const_163 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_8 , latex(valueQ2))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_9 , latex(valueQ2))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_175 
 _st_.inline(_sage_const_10 , latex(functionQ2f))
except:
 _st_.goboom(_sage_const_175 )
try:
 _st_.current_tex_line = _sage_const_176 
 _st_.inline(_sage_const_11 , latex(functionQ2g))
except:
 _st_.goboom(_sage_const_176 )
try:
 _st_.current_tex_line = _sage_const_178 
 _st_.inline(_sage_const_12 , latex(valueQ2))
except:
 _st_.goboom(_sage_const_178 )
try:
 _st_.current_tex_line = _sage_const_178 
 _st_.inline(_sage_const_13 , latex(evaluateFGQ2))
except:
 _st_.goboom(_sage_const_178 )
try:
 _st_.current_tex_line = _sage_const_180 
 _st_.inline(_sage_const_14 , latex(valueQ2))
except:
 _st_.goboom(_sage_const_180 )
try:
 _st_.current_tex_line = _sage_const_180 
 _st_.inline(_sage_const_15 , latex(evaluateGFQ2))
except:
 _st_.goboom(_sage_const_180 )
try:
 _st_.current_tex_line = _sage_const_190 
 _st_.inline(_sage_const_16 , latex(valueQ3))
except:
 _st_.goboom(_sage_const_190 )
try:
 _st_.current_tex_line = _sage_const_190 
 _st_.inline(_sage_const_17 , latex(valueQ3))
except:
 _st_.goboom(_sage_const_190 )
try:
 _st_.current_tex_line = _sage_const_192 
 _st_.inline(_sage_const_18 , latex(functionQ3f))
except:
 _st_.goboom(_sage_const_192 )
try:
 _st_.current_tex_line = _sage_const_193 
 _st_.inline(_sage_const_19 , latex(functionQ3g))
except:
 _st_.goboom(_sage_const_193 )
try:
 _st_.current_tex_line = _sage_const_195 
 _st_.inline(_sage_const_20 , latex(valueQ3))
except:
 _st_.goboom(_sage_const_195 )
try:
 _st_.current_tex_line = _sage_const_195 
 _st_.inline(_sage_const_21 , latex(evaluateFGQ3))
except:
 _st_.goboom(_sage_const_195 )
try:
 _st_.current_tex_line = _sage_const_197 
 _st_.inline(_sage_const_22 , latex(valueQ3))
except:
 _st_.goboom(_sage_const_197 )
try:
 _st_.current_tex_line = _sage_const_197 
 _st_.inline(_sage_const_23 , latex(evaluateGFQ3))
except:
 _st_.goboom(_sage_const_197 )
try:
 _st_.current_tex_line = _sage_const_207 
 _st_.inline(_sage_const_24 , latex(valueQ4))
except:
 _st_.goboom(_sage_const_207 )
try:
 _st_.current_tex_line = _sage_const_207 
 _st_.inline(_sage_const_25 , latex(valueQ4))
except:
 _st_.goboom(_sage_const_207 )
try:
 _st_.current_tex_line = _sage_const_209 
 _st_.inline(_sage_const_26 , latex(functionQ4f))
except:
 _st_.goboom(_sage_const_209 )
try:
 _st_.current_tex_line = _sage_const_210 
 _st_.inline(_sage_const_27 , latex(functionQ4g))
except:
 _st_.goboom(_sage_const_210 )
try:
 _st_.current_tex_line = _sage_const_212 
 _st_.inline(_sage_const_28 , latex(valueQ4))
except:
 _st_.goboom(_sage_const_212 )
try:
 _st_.current_tex_line = _sage_const_212 
 _st_.inline(_sage_const_29 , latex(evaluateFGQ4))
except:
 _st_.goboom(_sage_const_212 )
try:
 _st_.current_tex_line = _sage_const_214 
 _st_.inline(_sage_const_30 , latex(valueQ4))
except:
 _st_.goboom(_sage_const_214 )
try:
 _st_.current_tex_line = _sage_const_214 
 _st_.inline(_sage_const_31 , latex(evaluateGFQ4))
except:
 _st_.goboom(_sage_const_214 )
_st_.endofdoc()

