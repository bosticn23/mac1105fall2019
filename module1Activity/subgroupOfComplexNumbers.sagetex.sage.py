## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file subgroupOfComplexNumbers.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_188 = Integer(188); _sage_const_9 = Integer(9); _sage_const_198 = Integer(198); _sage_const_8 = Integer(8); _sage_const_11 = Integer(11); _sage_const_69 = Integer(69); _sage_const_170 = Integer(170); _sage_const_173 = Integer(173); _sage_const_183 = Integer(183); _sage_const_10 = Integer(10); _sage_const_15 = Integer(15); _sage_const_203 = Integer(203); _sage_const_213 = Integer(213)## This file (subgroupOfComplexNumbers.sagetex.sage) was *autogenerated* from subgroupOfComplexNumbers.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('subgroupOfComplexNumbers', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_69 
_st_.blockbegin()
try:
 # THIS code generates random Complex number. Options:
     # Rational
     # Irrational
     # Nonreal Complex
     # Pure Imaginary
     # Not a Complex number
 
 # Structure of question:
     #  \frac{\sage{numerator}}{\sage{denominator}} + \sage{complexPart}
 
 def generateRational():
     numerator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = ZZ.random_element(_sage_const_15 )+_sage_const_2 
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i**_sage_const_2 
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateIrrational():
     numerator = (ZZ.random_element(_sage_const_2 , _sage_const_15 ))*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*pi
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i**_sage_const_2 
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateNonRealComplex():
     numerator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*pi
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generatePureImaginary():
     numerator = _sage_const_0 
     denominator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*pi
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateNotComplex():
     numerator = pi*(ZZ.random_element(_sage_const_15 )+_sage_const_2 )*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = _sage_const_0 
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateDisplay(answer):
     if answer == "Rational":
         numerator, denominator, complexPart = generateRational()
     elif answer == "Irrational":
         numerator, denominator, complexPart = generateIrrational()
     elif answer == "NonrealComplex":
         numerator, denominator, complexPart = generateNonRealComplex()
     elif answer == "PureImaginary":
         numerator, denominator, complexPart = generatePureImaginary()
     elif answer == "NotComplexNumber":
         numerator, denominator, complexPart = generateNotComplex()
     else:
         numerator, denominator, complexPart = [_sage_const_0 , _sage_const_0 , _sage_const_0 ]
         print "\n\n\n Something went wrong choosing how to display the problem. \n\n\n\n"
     return [numerator, denominator, complexPart]
 
 def assignSetValue(set):
     if set == "Rational":
         value = _sage_const_0 
     elif set == "Irrational":
         value = _sage_const_1 
     elif set == "NonrealComplex":
         value = _sage_const_2 
     elif set == "PureImaginary":
         value = _sage_const_3 
     elif set == "NotComplexNumber":
         value = _sage_const_4 
     else:
         value = _sage_const_5 
         print "Something went wrong when assigning the set a value. Please look into this."
     return value
 
 ############# END OF DEFINITIONS ###############
 
 listOptions = ["Rational", "Irrational", "NonrealComplex", "PureImaginary", "NotComplexNumber"]
 
 ########## QUESTION 4 #############
 set4 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 answer4 = assignSetValue(set4)
 numerator4, denominator4, complexPart4 = generateDisplay(set4)
 
 ########## QUESTION 5 #############
 set5 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 answer5 = assignSetValue(set5)
 numerator5, denominator5, complexPart5 = generateDisplay(set5)
 
 ########## QUESTION 6 #############
 set6 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 answer6 = assignSetValue(set6)
 numerator6, denominator6, complexPart6 = generateDisplay(set6)
except:
 _st_.goboom(_sage_const_170 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_0 , latex(numerator4))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_1 , latex(denominator4))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_2 , latex(complexPart4))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_183 
 _st_.inline(_sage_const_3 , latex(answer4))
except:
 _st_.goboom(_sage_const_183 )
try:
 _st_.current_tex_line = _sage_const_188 
 _st_.inline(_sage_const_4 , latex(numerator5))
except:
 _st_.goboom(_sage_const_188 )
try:
 _st_.current_tex_line = _sage_const_188 
 _st_.inline(_sage_const_5 , latex(denominator5))
except:
 _st_.goboom(_sage_const_188 )
try:
 _st_.current_tex_line = _sage_const_188 
 _st_.inline(_sage_const_6 , latex(complexPart5))
except:
 _st_.goboom(_sage_const_188 )
try:
 _st_.current_tex_line = _sage_const_198 
 _st_.inline(_sage_const_7 , latex(answer5))
except:
 _st_.goboom(_sage_const_198 )
try:
 _st_.current_tex_line = _sage_const_203 
 _st_.inline(_sage_const_8 , latex(numerator6))
except:
 _st_.goboom(_sage_const_203 )
try:
 _st_.current_tex_line = _sage_const_203 
 _st_.inline(_sage_const_9 , latex(denominator6))
except:
 _st_.goboom(_sage_const_203 )
try:
 _st_.current_tex_line = _sage_const_203 
 _st_.inline(_sage_const_10 , latex(complexPart6))
except:
 _st_.goboom(_sage_const_203 )
try:
 _st_.current_tex_line = _sage_const_213 
 _st_.inline(_sage_const_11 , latex(answer6))
except:
 _st_.goboom(_sage_const_213 )
_st_.endofdoc()

