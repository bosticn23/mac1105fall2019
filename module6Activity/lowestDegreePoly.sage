## This file (lowestDegreePoly.sage) was *autogenerated* from the file lowestDegreePoly.tex.
import sagetex
_st_ = sagetex.SageTeXProcessor('lowestDegreePoly')
_st_.blockbegin()
try:
 def maybeMakeNegative(natural):
     integer = (-1)**ZZ.random_element(2) * natural
     return integer
 
 def generateFactorEasy():
     a = 1
     b = maybeMakeNegative(ZZ.random_element(3, 6))
     print b
     return [a, b]
 
 def generateFactorHard():
     a = ZZ.random_element(1, 4)
     b = maybeMakeNegative(ZZ.random_element(3, 6))
     while gcd(a, b) > 1:
         a = ZZ.random_element(1, 4)
         b = maybeMakeNegative(ZZ.random_element(3, 6))
     return [a, b]
 
 def generateAllFactorsEasy():
     factor1 = generateFactorEasy()
     factor2 = generateFactorEasy()
     factor3 = generateFactorEasy()
     return [factor1, factor2, factor3]
 
 def generateAllFactorsHard():
     factor1 = generateFactorHard()
     factor2 = generateFactorHard()
     factor3 = generateFactorHard()
     return [factor1, factor2, factor3]
 
 def generateZeros(factor1, factor2, factor3):
     zero1 = factor1[1]/factor1[0]
     zero2 = factor2[1]/factor2[0]
     zero3 = factor3[1]/factor3[0]
     return [zero1, zero2, zero3]
 
 def generatePolynomial(factor1, factor2, factor3):
     f10, f11 = factor1
     f20, f21 = factor2
     f30, f31 = factor3
     #
     a = f10*f20*f30
     b = -f11*f20*f30 - f10*f21*f30 - f10*f20*f31
     c = f11*f20*f31 + f10*f21*f31 + f11*f21*f30
     d = -f11*f21*f31
     #
     coefficients = [a, b, c, d]
     return coefficients
 
 ##### QUESTION 13 #####
 factor131, factor132, factor133 = generateAllFactorsEasy()
 zero131, zero132, zero133 = generateZeros(factor131, factor132, factor133)
 coefficients13 = generatePolynomial(factor131, factor132, factor133)
 
 ##### QUESTION 14 #####
 factor141, factor142, factor143 = generateAllFactorsEasy()
 zero141, zero142, zero143 = generateZeros(factor141, factor142, factor143)
 coefficients14 = generatePolynomial(factor141, factor142, factor143)
 
 ##### QUESTION 15 #####
 factor151, factor152, factor153 = generateAllFactorsHard()
 zero151, zero152, zero153 = generateZeros(factor151, factor152, factor153)
 coefficients15 = generatePolynomial(factor151, factor152, factor153)
 
 ##### QUESTION 16 #####
 factor161, factor162, factor163 = generateAllFactorsHard()
 zero161, zero162, zero163 = generateZeros(factor161, factor162, factor163)
 coefficients16 = generatePolynomial(factor161, factor162, factor163)
except:
 _st_.goboom(99)
_st_.blockend()
try:
 _st_.inline(0, zero131)
except:
 _st_.goboom(105)
try:
 _st_.inline(1, zero132)
except:
 _st_.goboom(105)
try:
 _st_.inline(2, zero133)
except:
 _st_.goboom(105)
try:
 _st_.inline(3, coefficients13[0])
except:
 _st_.goboom(107)
try:
 _st_.inline(4, coefficients13[1])
except:
 _st_.goboom(107)
try:
 _st_.inline(5, coefficients13[2])
except:
 _st_.goboom(107)
try:
 _st_.inline(6, coefficients13[3])
except:
 _st_.goboom(107)
try:
 _st_.inline(7, zero141)
except:
 _st_.goboom(115)
try:
 _st_.inline(8, zero142)
except:
 _st_.goboom(115)
try:
 _st_.inline(9, zero143)
except:
 _st_.goboom(115)
try:
 _st_.inline(10, coefficients14[0])
except:
 _st_.goboom(117)
try:
 _st_.inline(11, coefficients14[1])
except:
 _st_.goboom(117)
try:
 _st_.inline(12, coefficients14[2])
except:
 _st_.goboom(117)
try:
 _st_.inline(13, coefficients14[3])
except:
 _st_.goboom(117)
try:
 _st_.inline(14, zero151)
except:
 _st_.goboom(125)
try:
 _st_.inline(15, zero152)
except:
 _st_.goboom(125)
try:
 _st_.inline(16, zero153)
except:
 _st_.goboom(125)
try:
 _st_.inline(17, coefficients15[0])
except:
 _st_.goboom(127)
try:
 _st_.inline(18, coefficients15[1])
except:
 _st_.goboom(127)
try:
 _st_.inline(19, coefficients15[2])
except:
 _st_.goboom(127)
try:
 _st_.inline(20, coefficients15[3])
except:
 _st_.goboom(127)
try:
 _st_.inline(21, zero161)
except:
 _st_.goboom(139)
try:
 _st_.inline(22, zero162)
except:
 _st_.goboom(139)
try:
 _st_.inline(23, zero163)
except:
 _st_.goboom(139)
try:
 _st_.inline(24, coefficients16[0])
except:
 _st_.goboom(141)
try:
 _st_.inline(25, coefficients16[1])
except:
 _st_.goboom(141)
try:
 _st_.inline(26, coefficients16[2])
except:
 _st_.goboom(141)
try:
 _st_.inline(27, coefficients16[3])
except:
 _st_.goboom(141)
_st_.blockbegin()
try:
 def constructLowestDegreePolyIrrational(b):
     a = ZZ.random_element(2, 8)
     n = ZZ.random_element(-5, 5)
     d = ZZ.random_element(2, 8)
     if gcd(abs(n), d) > 1 or n == 0:
         n = ZZ.random_element(-5, 5)
         d = ZZ.random_element(2, 8)
     coefficients = [d, -2*b*d-n, 2*b*n + b**2*d - a*d, -b**2*n+a*n]
     zeros = [b, sqrt(a), n/d]
     return [coefficients, zeros]
 
 def constructLowestDegreePolyComplex(a):
     b = ZZ.random_element(2, 8)
     n = ZZ.random_element(-5, 5)
     d = ZZ.random_element(2, 8)
     if gcd(abs(n), d) > 1 or n == 0:
         n = ZZ.random_element(-5, 5)
         d = ZZ.random_element(2, 8)
     coefficients = [d, -n-2*a*d, 2*a*n+a**2*d+b**2*d, -a**2*n-b**2*n]
     zeros = [a, b, n/d]
     return [coefficients, zeros]
 #
 irrationalB = ZZ.random_element(2, 6)
 complexA = ZZ.random_element(2, 6)
 #
 # Q6 - Irrational Roots with b=0
 coefficientsQ6, zerosQ6 = constructLowestDegreePolyIrrational(0)
 # Q7 - Irrational Roots with b neq 0
 coefficientsQ7, zerosQ7 = constructLowestDegreePolyIrrational(irrationalB)
 # Q8 - Complex Roots with a=0
 coefficientsQ8, zerosQ8 = constructLowestDegreeComplex(0)
 # Q9 - Complex Roots with a neq 0
 coefficientsQ9, zerosQ9 = constructLowestDegreeComplex(complexA)
except:
 _st_.goboom(240)
_st_.blockend()
try:
 _st_.inline(28, zerosQ6[1])
except:
 _st_.goboom(246)
try:
 _st_.inline(29, zerosQ6[2])
except:
 _st_.goboom(246)
try:
 _st_.inline(30, coefficientsQ6[0])
except:
 _st_.goboom(248)
try:
 _st_.inline(31, coefficientsQ6[1])
except:
 _st_.goboom(248)
try:
 _st_.inline(32, coefficientsQ6[2])
except:
 _st_.goboom(248)
try:
 _st_.inline(33, coefficientsQ6[3])
except:
 _st_.goboom(248)
try:
 _st_.inline(34, zerosQ7[0])
except:
 _st_.goboom(255)
try:
 _st_.inline(35, zerosQ7[1])
except:
 _st_.goboom(255)
try:
 _st_.inline(36, zerosQ7[2])
except:
 _st_.goboom(255)
try:
 _st_.inline(37, coefficientsQ7[0])
except:
 _st_.goboom(257)
try:
 _st_.inline(38, coefficientsQ7[1])
except:
 _st_.goboom(257)
try:
 _st_.inline(39, coefficientsQ7[2])
except:
 _st_.goboom(257)
try:
 _st_.inline(40, coefficientsQ7[3])
except:
 _st_.goboom(257)
try:
 _st_.inline(41, zerosQ8[1])
except:
 _st_.goboom(264)
try:
 _st_.inline(42, zerosQ8[2])
except:
 _st_.goboom(264)
try:
 _st_.inline(43, coefficientsQ8[0])
except:
 _st_.goboom(266)
try:
 _st_.inline(44, coefficientsQ8[1])
except:
 _st_.goboom(266)
try:
 _st_.inline(45, coefficientsQ8[2])
except:
 _st_.goboom(266)
try:
 _st_.inline(46, coefficientsQ8[3])
except:
 _st_.goboom(266)
try:
 _st_.inline(47, zerosQ9[0])
except:
 _st_.goboom(273)
try:
 _st_.inline(48, zerosQ9[1])
except:
 _st_.goboom(273)
try:
 _st_.inline(49, zerosQ9[2])
except:
 _st_.goboom(273)
try:
 _st_.inline(50, coefficientsQ9[0])
except:
 _st_.goboom(275)
try:
 _st_.inline(51, coefficientsQ9[1])
except:
 _st_.goboom(275)
try:
 _st_.inline(52, coefficientsQ9[2])
except:
 _st_.goboom(275)
try:
 _st_.inline(53, coefficientsQ9[3])
except:
 _st_.goboom(275)
_st_.endofdoc()
